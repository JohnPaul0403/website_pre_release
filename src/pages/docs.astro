---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import docsData from '../data/documentation.json';

const { documentation } = docsData;
---

<Layout>
  <Header />
  <main class="docs-main">
    <!-- Header Section -->
    <section class="docs-header">
      <div class="container">
        <div class="header-content">
          <a href="/" class="back-link">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M19 12H5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M12 19l-7-7 7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            Back to Home
          </a>
          
          <div class="header-info">
            <div class="header-icon">
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z" stroke="currentColor" stroke-width="2"/>
                <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z" stroke="currentColor" stroke-width="2"/>
              </svg>
            </div>
            <div class="header-text">
              <h1 class="page-title">{documentation.title}</h1>
              <p class="last-updated">Last updated: {documentation.lastUpdated}</p>
            </div>
          </div>
          
          <p class="page-description">
            {documentation.description}
          </p>
        </div>
      </div>
    </section>

    <!-- Documentation Content -->
    <section class="docs-content">
      <div class="container">
        <div class="docs-layout">
          <!-- Sidebar Navigation -->
          <aside class="docs-sidebar">
            <div class="sidebar-content">
              <h3 class="sidebar-title">Documentation</h3>
              <nav class="sidebar-nav">
                {documentation.categories.map((category) => (
                  <div class="nav-category">
                    <button class="category-button" data-category={category.id}>
                      <div class="category-icon">
                        {category.icon === 'rocket' && (
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M4.5 16.5c-1.5 1.5-2 4.5-2 4.5s3-0.5 4.5-2c0.08-0.11 0.17-0.23 0.25-0.36l-2.39-2.39c-0.13 0.08-0.25 0.17-0.36 0.25z" stroke="currentColor" stroke-width="2"/>
                            <path d="M12 15l-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z" stroke="currentColor" stroke-width="2"/>
                            <path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" stroke="currentColor" stroke-width="2"/>
                            <path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'database' && (
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <ellipse cx="12" cy="5" rx="9" ry="3" stroke="currentColor" stroke-width="2"/>
                            <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3" stroke="currentColor" stroke-width="2"/>
                            <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'chart' && (
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 3v18h18" stroke="currentColor" stroke-width="2"/>
                            <path d="M18.7 8l-5.1 5.2-2.8-2.7L7 14.3" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'users' && (
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2" stroke="currentColor" stroke-width="2"/>
                            <circle cx="9" cy="7" r="4" stroke="currentColor" stroke-width="2"/>
                            <path d="M23 21v-2a4 4 0 0 0-3-3.87" stroke="currentColor" stroke-width="2"/>
                            <path d="M16 3.13a4 4 0 0 1 0 7.75" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'brain' && (
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3A2.5 2.5 0 0 1 9.5 2Z" stroke="currentColor" stroke-width="2"/>
                            <path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3A2.5 2.5 0 0 0 14.5 2Z" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'code' && (
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <polyline points="16,18 22,12 16,6" stroke="currentColor" stroke-width="2"/>
                            <polyline points="8,6 2,12 8,18" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                      </div>
                      <div class="category-info">
                        <span class="category-title">{category.title}</span>
                        <span class="category-description">{category.description}</span>
                      </div>
                      <div class="category-arrow">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <polyline points="9,18 15,12 9,6" stroke="currentColor" stroke-width="2"/>
                        </svg>
                      </div>
                    </button>
                    <div class="section-list" data-category={category.id}>
                      {category.sections.map((section) => (
                        <button class="section-button" data-section={section.id} data-category={category.id}>
                          {section.title}
                        </button>
                      ))}
                    </div>
                  </div>
                ))}
              </nav>
            </div>
          </aside>

          <!-- Main Content Area -->
          <main class="docs-main-content">
            <div class="content-header">
              <h2 class="content-title">Welcome to Aletheia Documentation</h2>
              <p class="content-description">
                Select a category from the sidebar to get started with Aletheia. Our comprehensive documentation 
                covers everything from basic setup to advanced AI-powered features.
              </p>
            </div>

            <!-- Dynamic Content Area -->
            <div class="content-area" id="content-area">
              <div class="welcome-content">
                <div class="welcome-grid">
                  {documentation.categories.map((category) => (
                    <div class="welcome-card" data-category={category.id}>
                      <div class="welcome-icon">
                        {category.icon === 'rocket' && (
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M4.5 16.5c-1.5 1.5-2 4.5-2 4.5s3-0.5 4.5-2c0.08-0.11 0.17-0.23 0.25-0.36l-2.39-2.39c-0.13 0.08-0.25 0.17-0.36 0.25z" stroke="currentColor" stroke-width="2"/>
                            <path d="M12 15l-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z" stroke="currentColor" stroke-width="2"/>
                            <path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" stroke="currentColor" stroke-width="2"/>
                            <path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'database' && (
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <ellipse cx="12" cy="5" rx="9" ry="3" stroke="currentColor" stroke-width="2"/>
                            <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3" stroke="currentColor" stroke-width="2"/>
                            <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'chart' && (
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 3v18h18" stroke="currentColor" stroke-width="2"/>
                            <path d="M18.7 8l-5.1 5.2-2.8-2.7L7 14.3" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'users' && (
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2" stroke="currentColor" stroke-width="2"/>
                            <circle cx="9" cy="7" r="4" stroke="currentColor" stroke-width="2"/>
                            <path d="M23 21v-2a4 4 0 0 0-3-3.87" stroke="currentColor" stroke-width="2"/>
                            <path d="M16 3.13a4 4 0 0 1 0 7.75" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'brain' && (
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3A2.5 2.5 0 0 1 9.5 2Z" stroke="currentColor" stroke-width="2"/>
                            <path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3A2.5 2.5 0 0 0 14.5 2Z" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                        {category.icon === 'code' && (
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <polyline points="16,18 22,12 16,6" stroke="currentColor" stroke-width="2"/>
                            <polyline points="8,6 2,12 8,18" stroke="currentColor" stroke-width="2"/>
                          </svg>
                        )}
                      </div>
                      <h3 class="welcome-title">{category.title}</h3>
                      <p class="welcome-description">{category.description}</p>
                      <div class="section-count">{category.sections.length} sections</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </main>
        </div>
      </div>
    </section>
  </main>
  <Footer />
</Layout>

<style>
  .docs-main {
    padding-top: 60px;
  }

  .docs-header {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    padding: 80px 0;
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    color: #2bc0e4;
    font-weight: 500;
    margin-bottom: 32px;
    transition: color 0.2s ease;
  }

  .back-link:hover {
    color: #239ab8;
  }

  .header-info {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-bottom: 24px;
  }

  .header-icon {
    width: 64px;
    height: 64px;
    background: linear-gradient(135deg, #eaecc6 0%, #2bc0e4 100%);
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .page-title {
    font-size: 36px;
    color: #1e3a8a;
    margin-bottom: 8px;
    font-weight: 700;
  }

  .last-updated {
    color: #6b7280;
    font-size: 16px;
  }

  .page-description {
    font-size: 18px;
    color: #6b7280;
    line-height: 1.6;
    max-width: 800px;
  }

  .docs-content {
    padding: 0;
  }

  .docs-layout {
    display: grid;
    grid-template-columns: 320px 1fr;
    min-height: calc(100vh - 160px);
  }

  /* Sidebar Styles */
  .docs-sidebar {
    background: #f8fafc;
    border-right: 1px solid #e5e7eb;
    position: sticky;
    top: 80px;
    height: calc(100vh - 80px);
    overflow-y: auto;
  }

  .sidebar-content {
    padding: 32px 24px;
  }

  .sidebar-title {
    font-size: 20px;
    color: #1e3a8a;
    margin-bottom: 24px;
    font-weight: 600;
  }

  .sidebar-nav {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .nav-category {
    border-radius: 8px;
    overflow: hidden;
  }

  .category-button {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
  }

  .category-button:hover {
    background: #f3f4f6;
    border-color: #2bc0e4;
  }

  .category-button.active {
    background: #faf5ff;
    border-color: #2bc0e4;
  }

  .category-icon {
    width: 40px;
    height: 40px;
    background: #dbeafe;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #3b82f6;
    flex-shrink: 0;
  }

  .category-info {
    flex: 1;
  }

  .category-title {
    display: block;
    font-weight: 600;
    color: #1e3a8a;
    margin-bottom: 4px;
  }

  .category-description {
    display: block;
    font-size: 12px;
    color: #6b7280;
    line-height: 1.3;
  }

  .category-arrow {
    color: #9ca3af;
    transition: transform 0.2s ease;
  }

  .category-button.active .category-arrow {
    transform: rotate(90deg);
  }

  .section-list {
    display: none;
    flex-direction: column;
    gap: 4px;
    padding: 8px 16px 16px 68px;
    background: #f9fafb;
  }

  .section-list.active {
    display: flex;
  }

  .section-button {
    padding: 8px 12px;
    background: transparent;
    border: none;
    border-radius: 6px;
    color: #6b7280;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
  }

  .section-button:hover {
    background: #e5e7eb;
    color: #374151;
  }

  .section-button.active {
    background: #2bc0e4;
    color: white;
  }

  /* Main Content Styles */
  .docs-main-content {
    padding: 32px 48px;
    overflow-y: auto;
  }

  .content-header {
    margin-bottom: 48px;
  }

  .content-title {
    font-size: 32px;
    color: #1e3a8a;
    margin-bottom: 16px;
    font-weight: 700;
  }

  .content-description {
    font-size: 18px;
    color: #6b7280;
    line-height: 1.6;
    max-width: 600px;
  }

  .content-area {
    min-height: 400px;
  }

  /* Welcome Content */
  .welcome-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 24px;
  }

  .welcome-card {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 24px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .welcome-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    border-color: #2bc0e4;
  }

  .welcome-icon {
    width: 48px;
    height: 48px;
    background: #dbeafe;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #3b82f6;
    margin-bottom: 16px;
  }

  .welcome-title {
    font-size: 20px;
    color: #1e3a8a;
    margin-bottom: 8px;
    font-weight: 600;
  }

  .welcome-description {
    color: #6b7280;
    margin-bottom: 12px;
    line-height: 1.5;
  }

  .section-count {
    font-size: 12px;
    color: #9ca3af;
    font-weight: 500;
  }

  /* Section Content Styles */
  .section-content {
    display: none;
  }

  .section-content.active {
    display: block;
  }

  .section-header {
    margin-bottom: 32px;
  }

  .section-title {
    font-size: 28px;
    color: #1e3a8a;
    margin-bottom: 16px;
    font-weight: 700;
  }

  .section-overview {
    font-size: 18px;
    color: #6b7280;
    line-height: 1.6;
    margin-bottom: 32px;
  }

  .content-section {
    margin-bottom: 32px;
  }

  .content-section h3 {
    font-size: 20px;
    color: #1e3a8a;
    margin-bottom: 16px;
    font-weight: 600;
  }

  .content-section h4 {
    font-size: 16px;
    color: #374151;
    margin-bottom: 12px;
    font-weight: 600;
  }

  .content-section p {
    color: #6b7280;
    line-height: 1.6;
    margin-bottom: 16px;
  }

  .content-list {
    list-style: none;
    padding: 0;
    margin: 0 0 16px 0;
  }

  .content-list li {
    color: #6b7280;
    margin-bottom: 8px;
    padding-left: 20px;
    position: relative;
  }

  .content-list li::before {
    content: '•';
    color: #2bc0e4;
    position: absolute;
    left: 0;
    font-weight: bold;
  }

  .steps-list {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .step-item {
    display: flex;
    align-items: flex-start;
    gap: 16px;
    padding: 16px;
    background: #f8fafc;
    border-radius: 8px;
    border-left: 4px solid #2bc0e4;
  }

  .step-number {
    width: 32px;
    height: 32px;
    background: #2bc0e4;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    flex-shrink: 0;
  }

  .step-content h4 {
    color: #1e3a8a;
    margin-bottom: 4px;
  }

  .step-content p {
    color: #6b7280;
    margin: 0;
  }

  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 16px;
    margin: 16px 0;
  }

  .info-card {
    background: #f8fafc;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 16px;
  }

  .info-card h4 {
    color: #1e3a8a;
    margin-bottom: 8px;
  }

  .info-card p {
    color: #6b7280;
    font-size: 14px;
    margin: 0;
  }

  @media (max-width: 1024px) {
    .docs-layout {
      grid-template-columns: 1fr;
    }

    .docs-sidebar {
      position: relative;
      height: auto;
      border-right: none;
      border-bottom: 1px solid #e5e7eb;
    }

    .docs-main-content {
      padding: 24px;
    }

    .page-title {
      font-size: 28px;
    }

    .header-info {
      flex-direction: column;
      align-items: flex-start;
      gap: 16px;
    }

    .welcome-grid {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .sidebar-content {
      padding: 24px 16px;
    }

    .docs-main-content {
      padding: 16px;
    }

    .content-title {
      font-size: 24px;
    }

    .section-title {
      font-size: 24px;
    }

    .category-button {
      padding: 12px;
    }

    .category-description {
      display: none;
    }
  }
</style>

<script define:vars={{ documentationData: documentation }}>
  document.addEventListener('DOMContentLoaded', function() {
    const categoryButtons = document.querySelectorAll('.category-button');
    const sectionButtons = document.querySelectorAll('.section-button');
    const contentArea = document.getElementById('content-area');
    const welcomeCards = document.querySelectorAll('.welcome-card');

    // Handle category button clicks
    categoryButtons.forEach(button => {
      button.addEventListener('click', function() {
        const categoryId = this.dataset.category;
        
        // Toggle active state
        categoryButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        // Toggle section list
        const sectionLists = document.querySelectorAll('.section-list');
        sectionLists.forEach(list => list.classList.remove('active'));
        
        const targetSectionList = document.querySelector(`[data-category="${categoryId}"].section-list`);
        if (targetSectionList) {
          targetSectionList.classList.add('active');
        }
        
        // Show category overview
        showCategoryOverview(categoryId);
      });
    });

    // Handle section button clicks
    sectionButtons.forEach(button => {
      button.addEventListener('click', function() {
        const sectionId = this.dataset.section;
        const categoryId = this.dataset.category;
        
        // Update active states
        sectionButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        // Show section content
        showSectionContent(categoryId, sectionId);
      });
    });

    // Handle welcome card clicks
    welcomeCards.forEach(card => {
      card.addEventListener('click', function() {
        const categoryId = this.dataset.category;
        
        // Activate category
        const categoryButton = document.querySelector(`[data-category="${categoryId}"].category-button`);
        if (categoryButton) {
          categoryButton.click();
        }
      });
    });

    function showCategoryOverview(categoryId) {
      const category = documentationData.categories.find(cat => cat.id === categoryId);
      if (!category) return;

      const content = `
        <div class="section-content active">
          <div class="section-header">
            <h2 class="section-title">${category.title}</h2>
            <p class="section-overview">${category.description}</p>
          </div>
          
          <div class="content-section">
            <h3>Available Sections</h3>
            <div class="info-grid">
              ${category.sections.map(section => `
                <div class="info-card">
                  <h4>${section.title}</h4>
                  <p>Click to view detailed information about ${section.title.toLowerCase()}.</p>
                </div>
              `).join('')}
            </div>
          </div>
        </div>
      `;
      
      contentArea.innerHTML = content;
    }

    function showSectionContent(categoryId, sectionId) {
      const category = documentationData.categories.find(cat => cat.id === categoryId);
      if (!category) return;
      
      const section = category.sections.find(sec => sec.id === sectionId);
      if (!section) return;

      let content = `
        <div class="section-content active">
          <div class="section-header">
            <h2 class="section-title">${section.title}</h2>
            <p class="section-overview">${section.content.overview}</p>
          </div>
      `;

      // Handle different content types
      Object.entries(section.content).forEach(([key, value]) => {
        if (key === 'overview') return; // Already handled above
        
        if (Array.isArray(value)) {
          content += `
            <div class="content-section">
              <h3>${formatKey(key)}</h3>
              <ul class="content-list">
                ${value.map(item => `<li>${item}</li>`).join('')}
              </ul>
            </div>
          `;
        } else if (typeof value === 'object' && value !== null) {
          if (key === 'steps') {
            content += `
              <div class="content-section">
                <h3>Step-by-Step Process</h3>
                <div class="steps-list">
                  ${value.map(step => `
                    <div class="step-item">
                      <div class="step-number">${step.step}</div>
                      <div class="step-content">
                        <h4>${step.title}</h4>
                        <p>${step.description}</p>
                      </div>
                    </div>
                  `).join('')}
                </div>
              </div>
            `;
          } else {
            content += `
              <div class="content-section">
                <h3>${formatKey(key)}</h3>
                <div class="info-grid">
                  ${Object.entries(value).map(([subKey, subValue]) => `
                    <div class="info-card">
                      <h4>${formatKey(subKey)}</h4>
                      <p>${Array.isArray(subValue) ? subValue.join(', ') : subValue}</p>
                    </div>
                  `).join('')}
                </div>
              </div>
            `;
          }
        } else {
          content += `
            <div class="content-section">
              <h3>${formatKey(key)}</h3>
              <p>${value}</p>
            </div>
          `;
        }
      });

      content += '</div>';
      contentArea.innerHTML = content;
    }

    function formatKey(key) {
      return key.split('_').map(word => 
        word.charAt(0).toUpperCase() + word.slice(1)
      ).join(' ');
    }
  });
</script>